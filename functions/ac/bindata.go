// Code generated by go-bindata.
// sources:
// signals/.gitkeep
// signals/ac-off.json
// signals/ac-on.json
// signals/dimlight-on.json
// signals/lights-decr.json
// signals/lights-incr.json
// signals/lights-off.json
// signals/lights-on.json
// signals/roomba-dock.json
// signals/roomba-toggle.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _signalsGitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func signalsGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_signalsGitkeep,
		"signals/.gitkeep",
	)
}

func signalsGitkeep() (*asset, error) {
	bytes, err := signalsGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "signals/.gitkeep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1489227959, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _signalsAcOffJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x4a\xcb\x2f\xca\x4d\x2c\x51\xb2\x52\x50\x2a\x4a\x2c\x57\xd2\x01\x0b\x15\xa5\x16\x2a\x59\x29\x18\x5b\x80\x79\x29\x89\x25\x89\x4a\x56\x0a\xd1\x66\x66\x26\x16\x3a\xc6\xc6\x26\x86\x3a\x16\x86\xa6\x24\x63\x23\x13\x53\xf2\x34\x92\x6d\x01\xcd\x6c\x84\x1b\x8c\xc9\xa0\xdc\x91\x04\x8d\x22\x5f\x01\xc9\x01\x82\xdd\x71\x96\xc6\x78\x83\x80\xea\xc1\x6e\x6e\x6c\xaa\x63\x61\x6e\x8c\x81\x61\xe2\xb8\x68\x18\x86\x38\x08\x9b\x00\x9c\x61\x6e\x61\x0e\xc7\x30\x3e\x3a\x8d\x8e\x71\xc9\x13\x2b\x8e\x4d\x9e\x24\x07\x91\x6a\x11\x21\xf5\x84\x3c\x08\x76\xa0\x91\x85\x05\x2a\x03\x3d\xb4\x61\x7c\x78\x52\xc1\xeb\x37\x10\x06\x4b\x20\x09\xc4\x72\x71\xd5\x02\x02\x00\x00\xff\xff\x1f\xcb\xc5\x34\x9a\x04\x00\x00")

func signalsAcOffJsonBytes() ([]byte, error) {
	return bindataRead(
		_signalsAcOffJson,
		"signals/ac-off.json",
	)
}

func signalsAcOffJson() (*asset, error) {
	bytes, err := signalsAcOffJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "signals/ac-off.json", size: 1178, mode: os.FileMode(420), modTime: time.Unix(1493532479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _signalsAcOnJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x4a\xcb\x2f\xca\x4d\x2c\x51\xb2\x52\x50\x2a\x4a\x2c\x57\xd2\x01\x0b\x15\xa5\x16\x2a\x59\x29\x18\x5b\x80\x79\x29\x89\x25\x89\x4a\x56\x0a\xd1\x66\x66\x26\x16\x3a\xc6\x46\x46\x16\x3a\x16\xe6\xc6\x3a\xe6\x16\xe6\x24\xd1\x46\x26\xa6\x86\x3a\x96\xc6\xa6\x3a\xe6\xc6\xa6\x3a\x96\x06\x26\x54\xa7\xc1\x16\x60\xd8\x48\x8e\x53\x89\xf2\x0a\x76\x86\xb9\x99\x21\x1c\xc3\xf8\xc8\x34\x4e\x37\x61\x37\x0a\xab\x11\xc6\x66\xf8\x63\x00\xa7\x09\x24\x07\x08\xee\x20\x25\x86\x41\x72\x18\xd0\x8a\x46\x24\x3d\x43\x03\x12\xdd\x4a\x6f\x1a\xaf\x83\xf0\x25\x2c\xfa\x3a\xd0\xd0\x14\xc1\x40\xc7\x18\x12\xa4\x6b\x89\xe5\xe2\xaa\x05\x04\x00\x00\xff\xff\x36\xce\x36\x78\x9c\x04\x00\x00")

func signalsAcOnJsonBytes() ([]byte, error) {
	return bindataRead(
		_signalsAcOnJson,
		"signals/ac-on.json",
	)
}

func signalsAcOnJson() (*asset, error) {
	bytes, err := signalsAcOnJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "signals/ac-on.json", size: 1180, mode: os.FileMode(420), modTime: time.Unix(1493532518, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _signalsDimlightOnJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xb1\x0a\x02\x31\x0c\x86\xf7\x3e\x45\xc9\x9c\x21\x7f\x72\xe9\xd5\xbe\x8a\x38\x14\xd4\x4d\xc4\x72\xe0\x20\xbe\xbb\xd0\x1b\x0e\xe4\xf4\x04\xb7\xaf\x7f\xff\x2f\x81\x3c\x42\x8c\x74\xbe\xb6\x4b\x9d\xa8\x44\x6a\xf5\x4e\xdc\xa3\x76\xba\x51\x89\x96\xfb\xeb\x58\xa7\x4a\x25\xee\x91\xc5\xc0\x79\x74\x67\xc0\x85\x21\x36\xce\x64\xaa\xf9\x3d\xfb\x95\x16\x77\x6d\xca\x3f\xbf\x9f\xb7\xa9\xe9\x06\x41\x44\x19\xd8\x6d\x19\x4b\xef\x3b\xad\x19\xc9\xdd\x9c\x85\x91\x34\x19\xcf\xd7\x1d\x06\x91\xde\x3b\x84\xf0\x7c\x05\x00\x00\xff\xff\xd2\x16\xc7\x1b\x9f\x01\x00\x00")

func signalsDimlightOnJsonBytes() ([]byte, error) {
	return bindataRead(
		_signalsDimlightOnJson,
		"signals/dimlight-on.json",
	)
}

func signalsDimlightOnJson() (*asset, error) {
	bytes, err := signalsDimlightOnJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "signals/dimlight-on.json", size: 415, mode: os.FileMode(420), modTime: time.Unix(1493890202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _signalsLightsDecrJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcd\x0a\xc2\x30\x10\x84\xef\x7d\x8a\x65\xcf\x7b\xd8\x1f\x37\x8d\x79\x15\xf1\x10\x50\x6f\x22\x86\x82\x07\xf1\xdd\xc5\xb4\xa2\xc5\x5a\x72\x9b\xec\xb7\x99\x19\xf6\xde\x01\xe0\xe9\x52\xce\x79\xc0\x04\x58\xf2\x0d\xa9\x8e\xca\xf1\x8a\x09\x2c\xd6\xd7\x21\x0f\x19\x13\xec\x24\xb2\x09\xc5\xde\x9d\x44\xb6\x4c\xc2\xac\xa3\x32\xd5\x48\x22\xfe\x9a\x59\xff\xa6\x6d\x6a\xfa\x3b\x53\x93\xb3\x37\x52\x9f\x37\x68\xa0\x7f\x72\xbf\x33\x7e\xfb\x7d\x9c\x97\xfa\x2d\xd1\xf5\xbd\xe0\x6e\x4e\x4c\x12\x34\x18\x8d\xd7\xdd\xa8\x4b\xdd\xdb\x77\x8f\x67\x00\x00\x00\xff\xff\x2c\x43\x34\x00\x9e\x01\x00\x00")

func signalsLightsDecrJsonBytes() ([]byte, error) {
	return bindataRead(
		_signalsLightsDecrJson,
		"signals/lights-decr.json",
	)
}

func signalsLightsDecrJson() (*asset, error) {
	bytes, err := signalsLightsDecrJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "signals/lights-decr.json", size: 414, mode: os.FileMode(420), modTime: time.Unix(1493885035, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _signalsLightsIncrJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x4a\xcb\x2f\xca\x4d\x2c\x51\xb2\x52\x50\x2a\x4a\x2c\x57\xd2\x01\x0b\x15\xa5\x16\x2a\x59\x29\x18\x5b\x80\x79\x29\x89\x25\x89\x4a\x56\x0a\xd1\x86\x16\x06\xc6\x86\x3a\x16\xe6\xa6\xa6\x3a\x86\x86\xa6\x06\x48\x84\xb1\x91\x91\x05\xba\x18\xb1\x04\x42\x2f\x36\x53\x28\x91\xc5\xef\x3e\x6c\x7a\x29\x71\x01\xb1\xbe\x44\x10\x66\xa6\xa6\xc6\xa6\x3a\x06\x3a\x86\x66\x46\x66\xc6\x3a\x90\xd0\x35\x31\x31\x40\x93\x85\xd3\x06\x86\x06\x16\x30\x55\x46\xa6\x86\x60\x55\xb1\x5c\xb5\x80\x00\x00\x00\xff\xff\xbd\xa1\xde\xe0\xc4\x01\x00\x00")

func signalsLightsIncrJsonBytes() ([]byte, error) {
	return bindataRead(
		_signalsLightsIncrJson,
		"signals/lights-incr.json",
	)
}

func signalsLightsIncrJson() (*asset, error) {
	bytes, err := signalsLightsIncrJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "signals/lights-incr.json", size: 452, mode: os.FileMode(420), modTime: time.Unix(1493884990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _signalsLightsOffJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x4a\xcb\x2f\xca\x4d\x2c\x51\xb2\x52\x50\x2a\x4a\x2c\x57\xd2\x01\x0b\x15\xa5\x16\x2a\x59\x29\x18\x5b\x80\x79\x29\x89\x25\x89\x4a\x56\x0a\xd1\x86\x16\x06\xc6\x86\x3a\x16\xe6\xa6\xa6\x3a\x86\x86\xa6\x06\x48\x84\xb1\x91\x91\x05\xba\x18\xb1\x04\x42\x2f\x92\x29\x06\xc6\xe6\x78\x64\xf1\xeb\x25\xd2\x0e\xfc\x2c\x62\x5d\x80\x95\x80\xeb\xc5\x66\x0a\x82\x30\x33\x35\x35\x36\xd5\x31\xd0\x31\x34\x33\x32\x33\xd6\x81\x84\xae\x89\x89\x01\x44\x36\x96\x8b\xab\x16\x10\x00\x00\xff\xff\x27\x1b\x8c\x92\x9f\x01\x00\x00")

func signalsLightsOffJsonBytes() ([]byte, error) {
	return bindataRead(
		_signalsLightsOffJson,
		"signals/lights-off.json",
	)
}

func signalsLightsOffJson() (*asset, error) {
	bytes, err := signalsLightsOffJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "signals/lights-off.json", size: 415, mode: os.FileMode(420), modTime: time.Unix(1492333440, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _signalsLightsOnJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x4a\xcb\x2f\xca\x4d\x2c\x51\xb2\x52\x50\x2a\x4a\x2c\x57\xd2\x01\x0b\x15\xa5\x16\x2a\x59\x29\x18\x5b\x80\x79\x29\x89\x25\x89\x4a\x56\x0a\xd1\x86\x16\x06\xc6\x86\x3a\x16\xe6\xa6\xa6\x3a\x86\x86\x96\x06\x50\xc2\xc0\xd8\x5c\xc7\xd8\xd8\xc4\x50\xc7\xd0\xc0\xdc\x18\x49\x8c\x58\x16\x44\xaf\xa1\xa9\x01\x12\x0b\x41\x50\x22\x4b\x89\x3a\x6a\xdb\x81\x45\x2c\x96\xab\x16\x10\x00\x00\xff\xff\x6d\x9e\xb5\xc3\x80\x01\x00\x00")

func signalsLightsOnJsonBytes() ([]byte, error) {
	return bindataRead(
		_signalsLightsOnJson,
		"signals/lights-on.json",
	)
}

func signalsLightsOnJson() (*asset, error) {
	bytes, err := signalsLightsOnJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "signals/lights-on.json", size: 384, mode: os.FileMode(420), modTime: time.Unix(1492332145, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _signalsRoombaDockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x4a\xcb\x2f\xca\x4d\x2c\x51\xb2\x52\x50\x2a\x4a\x2c\x57\xd2\x01\x0b\x15\xa5\x16\x2a\x59\x29\x18\x5b\x80\x79\x29\x89\x25\x89\x4a\x56\x0a\xd1\xa6\x96\x96\xe6\x3a\x86\x96\x96\x26\x10\x02\xc1\xc5\xc9\xc2\xa6\x03\x4c\x18\x5b\x98\x18\x1b\x63\x95\x26\xd7\x40\x73\x43\x63\x93\x11\x66\xe0\x68\x18\x8e\x86\xe1\x60\x30\x70\x34\x0c\x07\x5d\x18\x72\xc5\x72\xd5\x02\x02\x00\x00\xff\xff\x33\x66\xac\xd7\xdd\x05\x00\x00")

func signalsRoombaDockJsonBytes() ([]byte, error) {
	return bindataRead(
		_signalsRoombaDockJson,
		"signals/roomba-dock.json",
	)
}

func signalsRoombaDockJson() (*asset, error) {
	bytes, err := signalsRoombaDockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "signals/roomba-dock.json", size: 1501, mode: os.FileMode(420), modTime: time.Unix(1493880896, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _signalsRoombaToggleJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x4a\xcb\x2f\xca\x4d\x2c\x51\xb2\x52\x50\x2a\x4a\x2c\x57\xd2\x01\x0b\x15\xa5\x16\x2a\x59\x29\x18\x5b\x80\x79\x29\x89\x25\x89\x4a\x56\x0a\xd1\xa6\x96\x96\xe6\x3a\x86\x96\x96\x26\x10\x02\xc1\x45\x63\x11\xa1\xce\xc4\xd0\xd0\xdc\x90\x18\x85\xc3\xc8\x40\x23\x33\x43\xa3\xc1\xed\xc2\x11\x68\xe0\x60\x8f\x14\xae\x58\xae\x5a\x40\x00\x00\x00\xff\xff\x10\x38\xf5\x24\xa6\x03\x00\x00")

func signalsRoombaToggleJsonBytes() ([]byte, error) {
	return bindataRead(
		_signalsRoombaToggleJson,
		"signals/roomba-toggle.json",
	)
}

func signalsRoombaToggleJson() (*asset, error) {
	bytes, err := signalsRoombaToggleJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "signals/roomba-toggle.json", size: 934, mode: os.FileMode(420), modTime: time.Unix(1493880872, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"signals/.gitkeep": signalsGitkeep,
	"signals/ac-off.json": signalsAcOffJson,
	"signals/ac-on.json": signalsAcOnJson,
	"signals/dimlight-on.json": signalsDimlightOnJson,
	"signals/lights-decr.json": signalsLightsDecrJson,
	"signals/lights-incr.json": signalsLightsIncrJson,
	"signals/lights-off.json": signalsLightsOffJson,
	"signals/lights-on.json": signalsLightsOnJson,
	"signals/roomba-dock.json": signalsRoombaDockJson,
	"signals/roomba-toggle.json": signalsRoombaToggleJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"signals": &bintree{nil, map[string]*bintree{
		".gitkeep": &bintree{signalsGitkeep, map[string]*bintree{}},
		"ac-off.json": &bintree{signalsAcOffJson, map[string]*bintree{}},
		"ac-on.json": &bintree{signalsAcOnJson, map[string]*bintree{}},
		"dimlight-on.json": &bintree{signalsDimlightOnJson, map[string]*bintree{}},
		"lights-decr.json": &bintree{signalsLightsDecrJson, map[string]*bintree{}},
		"lights-incr.json": &bintree{signalsLightsIncrJson, map[string]*bintree{}},
		"lights-off.json": &bintree{signalsLightsOffJson, map[string]*bintree{}},
		"lights-on.json": &bintree{signalsLightsOnJson, map[string]*bintree{}},
		"roomba-dock.json": &bintree{signalsRoombaDockJson, map[string]*bintree{}},
		"roomba-toggle.json": &bintree{signalsRoombaToggleJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

